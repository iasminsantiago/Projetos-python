# üöó Verificador de Antiguidade de Ve√≠culo
## üìå Descri√ß√£o
# Este projeto implementa uma classe `Veiculo` em Python que representa um carro com **marca**, **modelo** e **ano**.  
# O programa possui um m√©todo que verifica se o carro √© considerado **antigo** (mais de 20 anos) ou **novo**.
# ---
## üì• Entrada
# - Marca (texto)
# - Modelo (texto)
# - Ano (inteiro)
# ---
## üì§ Sa√≠da
# - "Ve√≠culo antigo" ‚Üí caso o carro tenha mais de 20 anos.  
# - "Ve√≠culo novo" ‚Üí caso contr√°rio.  
# ---
## ‚ñ∂Ô∏è Como Executar
# 1. Clone o reposit√≥rio:
#    ```bash
#   git clone https://github.com/seu-usuario/veiculo-antigo.git
# 2. Entre na pasta do projeto: cd veiculo-antigo
# 3. Execute o programa: python veiculo.py



// m√≥dulos
from datetime import datetime

# Cria a Classe Veiculo e armazena sua marca, modelo e ano como atributos:
class Veiculo:                                                        # equivalente a public class Veiculo
    def __init__(self, marca: str, modelo: str, ano: int):            # m√©todo construtor do python, equivalente a public Class
      self.marca = marca                                              # equivalente a this em java
      self.modelo = modelo
      self.ano = ano
        
    # Implementa o m√©todo verificar_antiguidade e calcula a diferen√ßa entre o ano atual e o ano do ve√≠culo:
    def verificar_antiguidade(self) -> (str):
      ano_atual = datetime.now().year
      if ano_atual - self.ano > 20:
        return "Ve√≠culo antigo"
      else:
        return "Ve√≠culo novo"

# Entrada direta
marca = input("Informe a marca: ").strip()
modelo = input("Informe o modelo: ").strip()
ano = int(input("Informe o ano: ").strip())

# Instanciando o objeto e verificando a antiguidade
veiculo = Veiculo(marca, modelo, ano)                                 # equivalente a  public static void main(String[] args) {
print(veiculo.verificar_antiguidade())
